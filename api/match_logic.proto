syntax = "proto3";
package openmatch;
option go_package = "github.com/rivalry-matchmaker/rivalry/pkg/pb";
option csharp_namespace = "OpenMatch";

import "api/messages.proto";

message ValidateResponse {
}

service ValidationService {
  // Validate is where custom validation can be performed
  rpc Validate (Ticket) returns (ValidateResponse) {}
}

message GatherDataResponse {
  // Search fields are the fields which Open Match is aware of, and can be used when specifying filters.
  SearchFields search_fields = 1 [json_name = "search_fields"];
  // Customized information not inspected by Open Match, to be used by the match making function, evaluator, and
  // components making calls to Open Match.
  // Optional, depending on the requirements of the connected systems.
  Extensions extensions = 2 [json_name = "extensions"];
}

service DataService {
  // GatherData is where extra data from backend services can be added to the match request
  rpc GatherData (Ticket) returns (GatherDataResponse) {}
}

message MakeMatchesRequest {
  message PoolTickets {
    // A list of tickets that match this pool
    repeated Ticket tickets = 1 [json_name = "tickets"];
  }
  message PoolBackfills {
    // A list of backfills that match this pool
    repeated Backfill backfill = 1 [json_name = "backfill"];
  }
  // A MatchProfile is Open Match's representation of a Match specification. It is used to indicate the criteria for
  // selecting players for a match. A MatchProfile is the input to the API to get matches and is passed to the
  // MatchFunction. It contains all the information required by the MatchFunction to generate match proposals.
  MatchProfile match_profile = 1 [json_name = "match_profile"];
  // Pool tickets is a map from a pool name to a list of tickets that match the given pool in the match profile.
  map<string, PoolTickets> pool_tickets = 2 [json_name = "pool_tickets"];
  // Pool Backfills is a map from a pool name to a list of backfills that match the given pool in the match profile.
  map<string, PoolBackfills> pool_backfills = 3 [json_name = "pool_backfills"];
}

message MakeMatchesResponse {
  Match match = 1 [json_name = "match"];
  double score = 2 [json_name = "score"];
}

service MatchMakerService {
  // MakeMatches takes a MatchProfile and a map of pool names to ticket slices, and creates
  // a slice of Match's from that information
  rpc MakeMatches(MakeMatchesRequest) returns (stream MakeMatchesResponse) {}
}

service AssignmentService {
  rpc MakeAssignment(Match) returns (Assignment) {}
}
