// Code generated by MockGen. DO NOT EDIT.
// Source: rivalry/internal/dlm (interfaces: DLM)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDLM is a mock of DLM interface.
type MockDLM struct {
	ctrl     *gomock.Controller
	recorder *MockDLMMockRecorder
}

// MockDLMMockRecorder is the mock recorder for MockDLM.
type MockDLMMockRecorder struct {
	mock *MockDLM
}

// NewMockDLM creates a new mock instance.
func NewMockDLM(ctrl *gomock.Controller) *MockDLM {
	mock := &MockDLM{ctrl: ctrl}
	mock.recorder = &MockDLMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLM) EXPECT() *MockDLMMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockDLM) Lock(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockDLMMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockDLM)(nil).Lock), arg0, arg1)
}

// Unlock mocks base method.
func (m *MockDLM) Unlock(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockDLMMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockDLM)(nil).Unlock), arg0)
}
