// Code generated by MockGen. DO NOT EDIT.
// Source: rivalry/internal/managers/backfill (interfaces: Manager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	filter "github.com/rivalry-matchmaker/rivalry/internal/managers/filter"
	pb "github.com/rivalry-matchmaker/rivalry/pkg/pb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AcknowledgeBackfill mocks base method.
func (m *MockManager) AcknowledgeBackfill(arg0 context.Context, arg1 string, arg2 *pb.Assignment, arg3 filter.Manager) (*pb.Backfill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcknowledgeBackfill", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*pb.Backfill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcknowledgeBackfill indicates an expected call of AcknowledgeBackfill.
func (mr *MockManagerMockRecorder) AcknowledgeBackfill(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeBackfill", reflect.TypeOf((*MockManager)(nil).AcknowledgeBackfill), arg0, arg1, arg2, arg3)
}

// CreateBackfill mocks base method.
func (m *MockManager) CreateBackfill(arg0 context.Context, arg1 *pb.Backfill, arg2 filter.Manager) (*pb.Backfill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackfill", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.Backfill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackfill indicates an expected call of CreateBackfill.
func (mr *MockManagerMockRecorder) CreateBackfill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackfill", reflect.TypeOf((*MockManager)(nil).CreateBackfill), arg0, arg1, arg2)
}

// DeleteBackfill mocks base method.
func (m *MockManager) DeleteBackfill(arg0 context.Context, arg1 string, arg2 filter.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackfill", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackfill indicates an expected call of DeleteBackfill.
func (mr *MockManagerMockRecorder) DeleteBackfill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackfill", reflect.TypeOf((*MockManager)(nil).DeleteBackfill), arg0, arg1, arg2)
}

// GetAvailableBackfill mocks base method.
func (m *MockManager) GetAvailableBackfill(arg0 context.Context, arg1 string, arg2 int64) ([]*pb.Backfill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableBackfill", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pb.Backfill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableBackfill indicates an expected call of GetAvailableBackfill.
func (mr *MockManagerMockRecorder) GetAvailableBackfill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableBackfill", reflect.TypeOf((*MockManager)(nil).GetAvailableBackfill), arg0, arg1, arg2)
}

// GetBackfill mocks base method.
func (m *MockManager) GetBackfill(arg0 context.Context, arg1 string) (*pb.Backfill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackfill", arg0, arg1)
	ret0, _ := ret[0].(*pb.Backfill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackfill indicates an expected call of GetBackfill.
func (mr *MockManagerMockRecorder) GetBackfill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackfill", reflect.TypeOf((*MockManager)(nil).GetBackfill), arg0, arg1)
}

// MakeMatchWithBackfill mocks base method.
func (m *MockManager) MakeMatchWithBackfill(arg0 context.Context, arg1 *pb.Backfill, arg2 []string, arg3 filter.Manager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMatchWithBackfill", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeMatchWithBackfill indicates an expected call of MakeMatchWithBackfill.
func (mr *MockManagerMockRecorder) MakeMatchWithBackfill(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMatchWithBackfill", reflect.TypeOf((*MockManager)(nil).MakeMatchWithBackfill), arg0, arg1, arg2, arg3)
}

// UpdateBackfill mocks base method.
func (m *MockManager) UpdateBackfill(arg0 context.Context, arg1 *pb.Backfill, arg2 filter.Manager) (*pb.Backfill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackfill", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.Backfill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackfill indicates an expected call of UpdateBackfill.
func (mr *MockManagerMockRecorder) UpdateBackfill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackfill", reflect.TypeOf((*MockManager)(nil).UpdateBackfill), arg0, arg1, arg2)
}
