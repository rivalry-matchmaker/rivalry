// Code generated by MockGen. DO NOT EDIT.
// Source: rivalry/internal/managers/matches (interfaces: Manager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	pb "github.com/rivalry-matchmaker/rivalry/pkg/pb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// CreateMatch mocks base method.
func (m *MockManager) CreateMatch(arg0 context.Context, arg1 *pb.Match) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockManagerMockRecorder) CreateMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockManager)(nil).CreateMatch), arg0, arg1)
}

// Requeue mocks base method.
func (m *MockManager) Requeue(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requeue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Requeue indicates an expected call of Requeue.
func (mr *MockManagerMockRecorder) Requeue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requeue", reflect.TypeOf((*MockManager)(nil).Requeue), arg0)
}

// StreamMatches mocks base method.
func (m *MockManager) StreamMatches(arg0 context.Context, arg1 func(context.Context, *pb.Match)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamMatches", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamMatches indicates an expected call of StreamMatches.
func (mr *MockManagerMockRecorder) StreamMatches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMatches", reflect.TypeOf((*MockManager)(nil).StreamMatches), arg0, arg1)
}
