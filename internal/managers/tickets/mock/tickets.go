// Code generated by MockGen. DO NOT EDIT.
// Source: rivalry/internal/managers/tickets (interfaces: Manager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	filter "github.com/rivalry-matchmaker/rivalry/internal/managers/filter"
	pb "github.com/rivalry-matchmaker/rivalry/pkg/pb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddAssignmentToTickets mocks base method.
func (m *MockManager) AddAssignmentToTickets(arg0 context.Context, arg1 *pb.Assignment, arg2 []*pb.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssignmentToTickets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAssignmentToTickets indicates an expected call of AddAssignmentToTickets.
func (mr *MockManagerMockRecorder) AddAssignmentToTickets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssignmentToTickets", reflect.TypeOf((*MockManager)(nil).AddAssignmentToTickets), arg0, arg1, arg2)
}

// AssignTicketsToMatch mocks base method.
func (m *MockManager) AssignTicketsToMatch(arg0 context.Context, arg1 *pb.Match) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTicketsToMatch", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTicketsToMatch indicates an expected call of AssignTicketsToMatch.
func (mr *MockManagerMockRecorder) AssignTicketsToMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTicketsToMatch", reflect.TypeOf((*MockManager)(nil).AssignTicketsToMatch), arg0, arg1)
}

// Close mocks base method.
func (m *MockManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// CreateTicket mocks base method.
func (m *MockManager) CreateTicket(arg0 context.Context, arg1 *pb.Ticket, arg2 filter.Manager) (*pb.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockManagerMockRecorder) CreateTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockManager)(nil).CreateTicket), arg0, arg1, arg2)
}

// DeleteTicket mocks base method.
func (m *MockManager) DeleteTicket(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockManagerMockRecorder) DeleteTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockManager)(nil).DeleteTicket), arg0, arg1)
}

// GetTicket mocks base method.
func (m *MockManager) GetTicket(arg0 context.Context, arg1 string) (*pb.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", arg0, arg1)
	ret0, _ := ret[0].(*pb.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockManagerMockRecorder) GetTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockManager)(nil).GetTicket), arg0, arg1)
}

// GetTickets mocks base method.
func (m *MockManager) GetTickets(arg0 context.Context, arg1 []string) ([]*pb.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", arg0, arg1)
	ret0, _ := ret[0].([]*pb.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockManagerMockRecorder) GetTickets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockManager)(nil).GetTickets), arg0, arg1)
}

// ReleaseTicketsFromMatch mocks base method.
func (m *MockManager) ReleaseTicketsFromMatch(arg0 context.Context, arg1 *pb.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseTicketsFromMatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseTicketsFromMatch indicates an expected call of ReleaseTicketsFromMatch.
func (mr *MockManagerMockRecorder) ReleaseTicketsFromMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseTicketsFromMatch", reflect.TypeOf((*MockManager)(nil).ReleaseTicketsFromMatch), arg0, arg1)
}

// RequeueTickets mocks base method.
func (m *MockManager) RequeueTickets(arg0 context.Context, arg1 []*pb.Ticket, arg2 filter.Manager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequeueTickets", arg0, arg1, arg2)
}

// RequeueTickets indicates an expected call of RequeueTickets.
func (mr *MockManagerMockRecorder) RequeueTickets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequeueTickets", reflect.TypeOf((*MockManager)(nil).RequeueTickets), arg0, arg1, arg2)
}

// StreamTickets mocks base method.
func (m *MockManager) StreamTickets(arg0 context.Context, arg1 string, arg2 func(context.Context, *pb.StreamTicket, *pb.Ticket)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamTickets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamTickets indicates an expected call of StreamTickets.
func (mr *MockManagerMockRecorder) StreamTickets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamTickets", reflect.TypeOf((*MockManager)(nil).StreamTickets), arg0, arg1, arg2)
}

// WatchTicket mocks base method.
func (m *MockManager) WatchTicket(arg0 context.Context, arg1 string, arg2 func(context.Context, *pb.Ticket)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTicket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchTicket indicates an expected call of WatchTicket.
func (mr *MockManagerMockRecorder) WatchTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTicket", reflect.TypeOf((*MockManager)(nil).WatchTicket), arg0, arg1, arg2)
}
