// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: api/match_logic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{0}
}

type GatherDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search fields are the fields which Open Match is aware of, and can be used when specifying filters.
	SearchFields *SearchFields `protobuf:"bytes,1,opt,name=search_fields,proto3" json:"search_fields,omitempty"`
	// Customized information not inspected by Open Match, to be used by the match making function, evaluator, and
	// components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions *Extensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *GatherDataResponse) Reset() {
	*x = GatherDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherDataResponse) ProtoMessage() {}

func (x *GatherDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherDataResponse.ProtoReflect.Descriptor instead.
func (*GatherDataResponse) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{1}
}

func (x *GatherDataResponse) GetSearchFields() *SearchFields {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

func (x *GatherDataResponse) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type MakeMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A MatchProfile is Open Match's representation of a Match specification. It is used to indicate the criteria for
	// selecting players for a match. A MatchProfile is the input to the API to get matches and is passed to the
	// MatchFunction. It contains all the information required by the MatchFunction to generate match proposals.
	MatchProfile *MatchProfile `protobuf:"bytes,1,opt,name=match_profile,proto3" json:"match_profile,omitempty"`
	// Pool tickets is a map from a pool name to a list of tickets that match the given pool in the match profile.
	PoolTickets map[string]*MakeMatchesRequest_PoolTickets `protobuf:"bytes,2,rep,name=pool_tickets,proto3" json:"pool_tickets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pool Backfills is a map from a pool name to a list of backfills that match the given pool in the match profile.
	PoolBackfills map[string]*MakeMatchesRequest_PoolBackfills `protobuf:"bytes,3,rep,name=pool_backfills,proto3" json:"pool_backfills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MakeMatchesRequest) Reset() {
	*x = MakeMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesRequest) ProtoMessage() {}

func (x *MakeMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesRequest.ProtoReflect.Descriptor instead.
func (*MakeMatchesRequest) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{2}
}

func (x *MakeMatchesRequest) GetMatchProfile() *MatchProfile {
	if x != nil {
		return x.MatchProfile
	}
	return nil
}

func (x *MakeMatchesRequest) GetPoolTickets() map[string]*MakeMatchesRequest_PoolTickets {
	if x != nil {
		return x.PoolTickets
	}
	return nil
}

func (x *MakeMatchesRequest) GetPoolBackfills() map[string]*MakeMatchesRequest_PoolBackfills {
	if x != nil {
		return x.PoolBackfills
	}
	return nil
}

type MakeMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *Match  `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *MakeMatchesResponse) Reset() {
	*x = MakeMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesResponse) ProtoMessage() {}

func (x *MakeMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesResponse.ProtoReflect.Descriptor instead.
func (*MakeMatchesResponse) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{3}
}

func (x *MakeMatchesResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *MakeMatchesResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MakeMatchesRequest_PoolTickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of tickets that match this pool
	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *MakeMatchesRequest_PoolTickets) Reset() {
	*x = MakeMatchesRequest_PoolTickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesRequest_PoolTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesRequest_PoolTickets) ProtoMessage() {}

func (x *MakeMatchesRequest_PoolTickets) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesRequest_PoolTickets.ProtoReflect.Descriptor instead.
func (*MakeMatchesRequest_PoolTickets) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MakeMatchesRequest_PoolTickets) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type MakeMatchesRequest_PoolBackfills struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of backfills that match this pool
	Backfill []*Backfill `protobuf:"bytes,1,rep,name=backfill,proto3" json:"backfill,omitempty"`
}

func (x *MakeMatchesRequest_PoolBackfills) Reset() {
	*x = MakeMatchesRequest_PoolBackfills{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_match_logic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesRequest_PoolBackfills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesRequest_PoolBackfills) ProtoMessage() {}

func (x *MakeMatchesRequest_PoolBackfills) ProtoReflect() protoreflect.Message {
	mi := &file_api_match_logic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesRequest_PoolBackfills.ProtoReflect.Descriptor instead.
func (*MakeMatchesRequest_PoolBackfills) Descriptor() ([]byte, []int) {
	return file_api_match_logic_proto_rawDescGZIP(), []int{2, 1}
}

func (x *MakeMatchesRequest_PoolBackfills) GetBackfill() []*Backfill {
	if x != nil {
		return x.Backfill
	}
	return nil
}

var File_api_match_logic_proto protoreflect.FileDescriptor

var file_api_match_logic_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd9, 0x04, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0b, 0x50,
	0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x0d, 0x50, 0x6f, 0x6f, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x1a, 0x69, 0x0a, 0x10, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x13, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x51, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4f, 0x0a, 0x0b, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x65, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x32, 0x50, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x4d, 0x61, 0x6b, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x15, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6d, 0x67, 0x38, 0x34, 0x2f, 0x6f, 0x6d, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0x02, 0x09, 0x4f, 0x70, 0x65,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_match_logic_proto_rawDescOnce sync.Once
	file_api_match_logic_proto_rawDescData = file_api_match_logic_proto_rawDesc
)

func file_api_match_logic_proto_rawDescGZIP() []byte {
	file_api_match_logic_proto_rawDescOnce.Do(func() {
		file_api_match_logic_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_match_logic_proto_rawDescData)
	})
	return file_api_match_logic_proto_rawDescData
}

var file_api_match_logic_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_match_logic_proto_goTypes = []interface{}{
	(*ValidateResponse)(nil),                 // 0: openmatch.ValidateResponse
	(*GatherDataResponse)(nil),               // 1: openmatch.GatherDataResponse
	(*MakeMatchesRequest)(nil),               // 2: openmatch.MakeMatchesRequest
	(*MakeMatchesResponse)(nil),              // 3: openmatch.MakeMatchesResponse
	(*MakeMatchesRequest_PoolTickets)(nil),   // 4: openmatch.MakeMatchesRequest.PoolTickets
	(*MakeMatchesRequest_PoolBackfills)(nil), // 5: openmatch.MakeMatchesRequest.PoolBackfills
	nil,                                      // 6: openmatch.MakeMatchesRequest.PoolTicketsEntry
	nil,                                      // 7: openmatch.MakeMatchesRequest.PoolBackfillsEntry
	(*SearchFields)(nil),                     // 8: openmatch.SearchFields
	(*Extensions)(nil),                       // 9: openmatch.Extensions
	(*MatchProfile)(nil),                     // 10: openmatch.MatchProfile
	(*Match)(nil),                            // 11: openmatch.Match
	(*Ticket)(nil),                           // 12: openmatch.Ticket
	(*Backfill)(nil),                         // 13: openmatch.Backfill
	(*Assignment)(nil),                       // 14: openmatch.Assignment
}
var file_api_match_logic_proto_depIdxs = []int32{
	8,  // 0: openmatch.GatherDataResponse.search_fields:type_name -> openmatch.SearchFields
	9,  // 1: openmatch.GatherDataResponse.extensions:type_name -> openmatch.Extensions
	10, // 2: openmatch.MakeMatchesRequest.match_profile:type_name -> openmatch.MatchProfile
	6,  // 3: openmatch.MakeMatchesRequest.pool_tickets:type_name -> openmatch.MakeMatchesRequest.PoolTicketsEntry
	7,  // 4: openmatch.MakeMatchesRequest.pool_backfills:type_name -> openmatch.MakeMatchesRequest.PoolBackfillsEntry
	11, // 5: openmatch.MakeMatchesResponse.match:type_name -> openmatch.Match
	12, // 6: openmatch.MakeMatchesRequest.PoolTickets.tickets:type_name -> openmatch.Ticket
	13, // 7: openmatch.MakeMatchesRequest.PoolBackfills.backfill:type_name -> openmatch.Backfill
	4,  // 8: openmatch.MakeMatchesRequest.PoolTicketsEntry.value:type_name -> openmatch.MakeMatchesRequest.PoolTickets
	5,  // 9: openmatch.MakeMatchesRequest.PoolBackfillsEntry.value:type_name -> openmatch.MakeMatchesRequest.PoolBackfills
	12, // 10: openmatch.ValidationService.Validate:input_type -> openmatch.Ticket
	12, // 11: openmatch.DataService.GatherData:input_type -> openmatch.Ticket
	2,  // 12: openmatch.MatchMakerService.MakeMatches:input_type -> openmatch.MakeMatchesRequest
	11, // 13: openmatch.AssignmentService.MakeAssignment:input_type -> openmatch.Match
	0,  // 14: openmatch.ValidationService.Validate:output_type -> openmatch.ValidateResponse
	1,  // 15: openmatch.DataService.GatherData:output_type -> openmatch.GatherDataResponse
	3,  // 16: openmatch.MatchMakerService.MakeMatches:output_type -> openmatch.MakeMatchesResponse
	14, // 17: openmatch.AssignmentService.MakeAssignment:output_type -> openmatch.Assignment
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_match_logic_proto_init() }
func file_api_match_logic_proto_init() {
	if File_api_match_logic_proto != nil {
		return
	}
	file_api_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_match_logic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_match_logic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_match_logic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_match_logic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_match_logic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesRequest_PoolTickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_match_logic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesRequest_PoolBackfills); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_match_logic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_api_match_logic_proto_goTypes,
		DependencyIndexes: file_api_match_logic_proto_depIdxs,
		MessageInfos:      file_api_match_logic_proto_msgTypes,
	}.Build()
	File_api_match_logic_proto = out.File
	file_api_match_logic_proto_rawDesc = nil
	file_api_match_logic_proto_goTypes = nil
	file_api_match_logic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ValidationServiceClient is the client API for ValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidationServiceClient interface {
	// Validate is where custom validation can be performed
	Validate(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type validationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationServiceClient(cc grpc.ClientConnInterface) ValidationServiceClient {
	return &validationServiceClient{cc}
}

func (c *validationServiceClient) Validate(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/openmatch.ValidationService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationServiceServer is the server API for ValidationService service.
type ValidationServiceServer interface {
	// Validate is where custom validation can be performed
	Validate(context.Context, *Ticket) (*ValidateResponse, error)
}

// UnimplementedValidationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValidationServiceServer struct {
}

func (*UnimplementedValidationServiceServer) Validate(context.Context, *Ticket) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

func RegisterValidationServiceServer(s *grpc.Server, srv ValidationServiceServer) {
	s.RegisterService(&_ValidationService_serviceDesc, srv)
}

func _ValidationService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.ValidationService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).Validate(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.ValidationService",
	HandlerType: (*ValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _ValidationService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/match_logic.proto",
}

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	// GatherData is where extra data from backend services can be added to the match request
	GatherData(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*GatherDataResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GatherData(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*GatherDataResponse, error) {
	out := new(GatherDataResponse)
	err := c.cc.Invoke(ctx, "/openmatch.DataService/GatherData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	// GatherData is where extra data from backend services can be added to the match request
	GatherData(context.Context, *Ticket) (*GatherDataResponse, error)
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) GatherData(context.Context, *Ticket) (*GatherDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatherData not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_GatherData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GatherData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.DataService/GatherData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GatherData(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatherData",
			Handler:    _DataService_GatherData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/match_logic.proto",
}

// MatchMakerServiceClient is the client API for MatchMakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchMakerServiceClient interface {
	// MakeMatches takes a MatchProfile and a map of pool names to ticket slices, and creates
	// a slice of Match's from that information
	MakeMatches(ctx context.Context, in *MakeMatchesRequest, opts ...grpc.CallOption) (MatchMakerService_MakeMatchesClient, error)
}

type matchMakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchMakerServiceClient(cc grpc.ClientConnInterface) MatchMakerServiceClient {
	return &matchMakerServiceClient{cc}
}

func (c *matchMakerServiceClient) MakeMatches(ctx context.Context, in *MakeMatchesRequest, opts ...grpc.CallOption) (MatchMakerService_MakeMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MatchMakerService_serviceDesc.Streams[0], "/openmatch.MatchMakerService/MakeMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchMakerServiceMakeMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchMakerService_MakeMatchesClient interface {
	Recv() (*MakeMatchesResponse, error)
	grpc.ClientStream
}

type matchMakerServiceMakeMatchesClient struct {
	grpc.ClientStream
}

func (x *matchMakerServiceMakeMatchesClient) Recv() (*MakeMatchesResponse, error) {
	m := new(MakeMatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchMakerServiceServer is the server API for MatchMakerService service.
type MatchMakerServiceServer interface {
	// MakeMatches takes a MatchProfile and a map of pool names to ticket slices, and creates
	// a slice of Match's from that information
	MakeMatches(*MakeMatchesRequest, MatchMakerService_MakeMatchesServer) error
}

// UnimplementedMatchMakerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMatchMakerServiceServer struct {
}

func (*UnimplementedMatchMakerServiceServer) MakeMatches(*MakeMatchesRequest, MatchMakerService_MakeMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeMatches not implemented")
}

func RegisterMatchMakerServiceServer(s *grpc.Server, srv MatchMakerServiceServer) {
	s.RegisterService(&_MatchMakerService_serviceDesc, srv)
}

func _MatchMakerService_MakeMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MakeMatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchMakerServiceServer).MakeMatches(m, &matchMakerServiceMakeMatchesServer{stream})
}

type MatchMakerService_MakeMatchesServer interface {
	Send(*MakeMatchesResponse) error
	grpc.ServerStream
}

type matchMakerServiceMakeMatchesServer struct {
	grpc.ServerStream
}

func (x *matchMakerServiceMakeMatchesServer) Send(m *MakeMatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MatchMakerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.MatchMakerService",
	HandlerType: (*MatchMakerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeMatches",
			Handler:       _MatchMakerService_MakeMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/match_logic.proto",
}

// AssignmentServiceClient is the client API for AssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssignmentServiceClient interface {
	MakeAssignment(ctx context.Context, in *Match, opts ...grpc.CallOption) (*Assignment, error)
}

type assignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentServiceClient(cc grpc.ClientConnInterface) AssignmentServiceClient {
	return &assignmentServiceClient{cc}
}

func (c *assignmentServiceClient) MakeAssignment(ctx context.Context, in *Match, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/openmatch.AssignmentService/MakeAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentServiceServer is the server API for AssignmentService service.
type AssignmentServiceServer interface {
	MakeAssignment(context.Context, *Match) (*Assignment, error)
}

// UnimplementedAssignmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAssignmentServiceServer struct {
}

func (*UnimplementedAssignmentServiceServer) MakeAssignment(context.Context, *Match) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAssignment not implemented")
}

func RegisterAssignmentServiceServer(s *grpc.Server, srv AssignmentServiceServer) {
	s.RegisterService(&_AssignmentService_serviceDesc, srv)
}

func _AssignmentService_MakeAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Match)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).MakeAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.AssignmentService/MakeAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).MakeAssignment(ctx, req.(*Match))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.AssignmentService",
	HandlerType: (*AssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeAssignment",
			Handler:    _AssignmentService_MakeAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/match_logic.proto",
}
